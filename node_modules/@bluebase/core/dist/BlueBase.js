"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const api_1 = require("./api");
const registries_1 = require("./registries");
const Context_1 = require("./Context");
const react_1 = tslib_1.__importDefault(require("react"));
const themes_1 = require("./themes");
const filters_1 = tslib_1.__importDefault(require("./filters"));
class BlueBase {
    constructor() {
        // APIs
        this.Analytics = new api_1.Analytics(this);
        this.Logger = new api_1.Logger(this);
        // Registries
        this.Components = new registries_1.ComponentRegistry(this);
        this.Configs = new registries_1.ConfigRegistry(this);
        this.Filters = new registries_1.FilterRegistry(this);
        this.Plugins = new registries_1.PluginRegistry(this);
        this.Themes = new registries_1.ThemeRegistry(this);
        // Flags
        this.booted = false;
        this.bootOptions = {
            components: {},
            configs: {},
            filters: {},
            plugins: [],
            themes: [],
        };
    }
    async boot(options) {
        // Update boot options
        this.bootOptions = Object.assign({}, this.bootOptions, options);
        // Register basic filters here, so they can be used in boot
        await this.Filters.registerNestedCollection(filters_1.default);
        await this.Filters.registerNestedCollection(this.bootOptions.filters);
        // ðŸš€ Boot!
        await this.Filters.run('bluebase.boot', this.bootOptions);
        const BlueBaseContent = this.Components.resolve('BlueBaseContent');
        // Navigation
        const navigatorConfigs = await this.Filters.run('bluebase.navigator.root', {});
        const BlueBaseRoot = () => (react_1.default.createElement(Context_1.BlueBaseProvider, { value: this },
            react_1.default.createElement(themes_1.ThemeProvider, null,
                react_1.default.createElement(BlueBaseContent, { BB: this, children: this.bootOptions.children, navigator: navigatorConfigs }))));
        this.booted = true;
        return BlueBaseRoot;
    }
}
exports.BlueBase = BlueBase;
