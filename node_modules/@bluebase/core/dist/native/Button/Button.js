"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_native_1 = require("react-native");
const react_1 = tslib_1.__importDefault(require("react"));
/**
 * A basic button component that should render nicely on any platform. Supports
 * a minimal level of customization.
 */
class Button extends react_1.default.Component {
    render() {
        const { color = 'default', onPress, children, disabled, fullWidth, 
        // active,
        // size,
        testID, } = this.props;
        const styles = this.props.styles;
        const rootStyles = [styles.root];
        const textStyles = [styles.text];
        if (color === 'default') {
            rootStyles.push(styles.default);
            textStyles.push(styles.defaultText);
        }
        if (color === 'primary') {
            rootStyles.push(styles.primary);
            textStyles.push(styles.primaryText);
        }
        if (color === 'secondary') {
            rootStyles.push(styles.secondary);
            textStyles.push(styles.secondaryText);
        }
        if (color === 'link') {
            rootStyles.push(styles.link);
            textStyles.push(styles.linkText);
        }
        if (fullWidth === true) {
            rootStyles.push(styles.fullWidth);
        }
        const Touchable = react_native_1.Platform.OS === 'android' ? react_native_1.TouchableNativeFeedback : react_native_1.TouchableOpacity;
        return (react_1.default.createElement(Touchable, { accessibilityRole: "button", disabled: disabled, onPress: onPress },
            react_1.default.createElement(react_native_1.View, { style: rootStyles, testID: testID }, typeof children === 'string'
                ? react_1.default.createElement(react_native_1.Text, { style: textStyles }, children)
                : children)));
    }
}
Button.defaultStyles = (theme) => ({
    default: {
        backgroundColor: theme.palette.background.default,
    },
    defaultText: {},
    fullWidth: {
        alignSelf: 'stretch',
    },
    link: {},
    linkText: {},
    primary: {
        backgroundColor: theme.palette.primary.main,
    },
    primaryText: {
        color: theme.palette.primary.contrastText,
    },
    root: {
        alignSelf: 'flex-start',
        borderRadius: theme.shape.borderRadius,
        paddingBottom: theme.spacing.unit,
        paddingLeft: theme.spacing.unit * 2,
        paddingRight: theme.spacing.unit * 2,
        paddingTop: theme.spacing.unit,
    },
    secondary: {
        backgroundColor: theme.palette.secondary.main,
    },
    secondaryText: {
        color: theme.palette.secondary.contrastText,
    },
    text: Object.assign({}, theme.typography.button, { textAlign: 'center' }),
});
exports.Button = Button;
