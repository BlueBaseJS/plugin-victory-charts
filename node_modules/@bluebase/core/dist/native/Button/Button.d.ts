import { TextStyle, ViewStyle } from 'react-native';
import React from 'react';
import { Theme } from '../../registries';
export interface ButtonStyles {
    root: ViewStyle;
    primary: ViewStyle;
    secondary: ViewStyle;
    default: ViewStyle;
    link: ViewStyle;
    fullWidth: ViewStyle;
    text: TextStyle;
    primaryText: TextStyle;
    secondaryText: TextStyle;
    defaultText: TextStyle;
    linkText: TextStyle;
}
export interface ButtonProps {
    children?: React.ReactNode;
    color?: 'primary' | 'secondary' | 'link' | 'default';
    /**
     * Callback function fired when button is pressed.
     */
    onPress?: (event?: any) => any;
    /**
     * If true, renders a disabled button.
     */
    disabled?: boolean;
    /**
     * If true, button is generated with 100% width of the container.
     */
    fullWidth?: boolean;
    /**
     * If true, shows active state of the button.
     */
    active?: boolean;
    /**
     * The size of the button.
     */
    size?: 'small' | 'medium' | 'large';
    /**
     * Button Styles
     */
    styles?: ButtonStyles;
    /**
     * Used to locate this view in end-to-end tests.
     */
    testID?: string;
    [key: string]: any;
}
/**
 * A basic button component that should render nicely on any platform. Supports
 * a minimal level of customization.
 */
export declare class Button extends React.Component<ButtonProps> {
    static defaultStyles: (theme: Theme) => {
        default: {
            backgroundColor: string;
        };
        defaultText: {};
        fullWidth: {
            alignSelf: string;
        };
        link: {};
        linkText: {};
        primary: {
            backgroundColor: string;
        };
        primaryText: {
            color: string;
        };
        root: {
            alignSelf: string;
            borderRadius: number;
            paddingBottom: number;
            paddingLeft: number;
            paddingRight: number;
            paddingTop: number;
        };
        secondary: {
            backgroundColor: string;
        };
        secondaryText: {
            color: string;
        };
        text: {
            textAlign: string;
            color?: string | undefined;
            fontFamily?: string | undefined;
            fontSize?: number | undefined;
            fontStyle?: "normal" | "italic" | undefined;
            fontWeight?: "bold" | "normal" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | undefined;
            letterSpacing?: number | undefined;
            lineHeight?: number | undefined;
            textDecorationLine?: "none" | "line-through" | "underline" | "underline line-through" | undefined;
            textDecorationStyle?: "dashed" | "dotted" | "double" | "solid" | undefined;
            textDecorationColor?: string | undefined;
            textShadowColor?: string | undefined;
            textShadowOffset?: {
                width: number;
                height: number;
            } | undefined;
            textShadowRadius?: number | undefined;
            testID?: string | undefined;
            textTransform?: "none" | "capitalize" | "lowercase" | "uppercase" | undefined;
            writingDirection?: "auto" | "ltr" | "rtl" | undefined;
            backfaceVisibility?: "hidden" | "visible" | undefined;
            backgroundColor?: string | undefined;
            borderBottomColor?: string | undefined;
            borderBottomEndRadius?: number | undefined;
            borderBottomLeftRadius?: number | undefined;
            borderBottomRightRadius?: number | undefined;
            borderBottomStartRadius?: number | undefined;
            borderBottomWidth?: number | undefined;
            borderColor?: string | undefined;
            borderEndColor?: string | undefined;
            borderLeftColor?: string | undefined;
            borderLeftWidth?: number | undefined;
            borderRadius?: number | undefined;
            borderRightColor?: string | undefined;
            borderRightWidth?: number | undefined;
            borderStartColor?: string | undefined;
            borderStyle?: "dashed" | "dotted" | "solid" | undefined;
            borderTopColor?: string | undefined;
            borderTopEndRadius?: number | undefined;
            borderTopLeftRadius?: number | undefined;
            borderTopRightRadius?: number | undefined;
            borderTopStartRadius?: number | undefined;
            borderTopWidth?: number | undefined;
            borderWidth?: number | undefined;
            opacity?: number | undefined;
            elevation?: number | undefined;
            alignContent?: "space-around" | "space-between" | "stretch" | "center" | "flex-end" | "flex-start" | undefined;
            alignItems?: "stretch" | "center" | "flex-end" | "flex-start" | "baseline" | undefined;
            alignSelf?: "stretch" | "center" | "flex-end" | "flex-start" | "baseline" | "auto" | undefined;
            aspectRatio?: number | undefined;
            borderEndWidth?: string | number | undefined;
            borderStartWidth?: string | number | undefined;
            bottom?: string | number | undefined;
            display?: "none" | "flex" | undefined;
            end?: string | number | undefined;
            flex?: number | undefined;
            flexBasis?: string | number | undefined;
            flexDirection?: "column" | "column-reverse" | "row" | "row-reverse" | undefined;
            flexGrow?: number | undefined;
            flexShrink?: number | undefined;
            flexWrap?: "nowrap" | "wrap" | "wrap-reverse" | undefined;
            height?: string | number | undefined;
            justifyContent?: "space-around" | "space-between" | "space-evenly" | "center" | "flex-end" | "flex-start" | undefined;
            left?: string | number | undefined;
            margin?: string | number | undefined;
            marginBottom?: string | number | undefined;
            marginEnd?: string | number | undefined;
            marginHorizontal?: string | number | undefined;
            marginLeft?: string | number | undefined;
            marginRight?: string | number | undefined;
            marginStart?: string | number | undefined;
            marginTop?: string | number | undefined;
            marginVertical?: string | number | undefined;
            maxHeight?: string | number | undefined;
            maxWidth?: string | number | undefined;
            minHeight?: string | number | undefined;
            minWidth?: string | number | undefined;
            overflow?: "hidden" | "visible" | "scroll" | undefined;
            padding?: string | number | undefined;
            paddingBottom?: string | number | undefined;
            paddingEnd?: string | number | undefined;
            paddingHorizontal?: string | number | undefined;
            paddingLeft?: string | number | undefined;
            paddingRight?: string | number | undefined;
            paddingStart?: string | number | undefined;
            paddingTop?: string | number | undefined;
            paddingVertical?: string | number | undefined;
            position?: "absolute" | "relative" | undefined;
            right?: string | number | undefined;
            start?: string | number | undefined;
            top?: string | number | undefined;
            width?: string | number | undefined;
            zIndex?: number | undefined;
            direction?: "inherit" | "ltr" | "rtl" | undefined;
            shadowColor?: string | undefined;
            shadowOffset?: {
                width: number;
                height: number;
            } | undefined;
            shadowOpacity?: number | undefined;
            shadowRadius?: number | undefined;
            transform?: (import("react-native").PerpectiveTransform | import("react-native").RotateTransform | import("react-native").RotateXTransform | import("react-native").RotateYTransform | import("react-native").RotateZTransform | import("react-native").ScaleTransform | import("react-native").ScaleXTransform | import("react-native").ScaleYTransform | import("react-native").TranslateXTransform | import("react-native").TranslateYTransform | import("react-native").SkewXTransform | import("react-native").SkewYTransform)[] | undefined;
            transformMatrix?: number[] | undefined;
            rotation?: number | undefined;
            scaleX?: number | undefined;
            scaleY?: number | undefined;
            translateX?: number | undefined;
            translateY?: number | undefined;
            textAlignVertical?: "center" | "auto" | "bottom" | "top" | undefined;
            includeFontPadding?: boolean | undefined;
        };
    };
    render(): JSX.Element;
}
