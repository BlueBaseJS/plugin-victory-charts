"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable: object-literal-sort-keys
const native_1 = require("../native");
const components_1 = require("../components/");
exports.components = {
    /**
     * Registers all components that ship with BlueBase
     */
    'bluebase.components.register.internal': [
        {
            key: 'bluebase-components-register-internal-default',
            priority: 5,
            value: async (bootOptions, _ctx, BB) => {
                await BB.Components.registerCollection({
                    // BlueBase Components
                    BlueBaseContent: components_1.BlueBaseContent,
                    BlueBaseFilter: components_1.BlueBaseFilter,
                    ComponentState: components_1.ComponentState,
                    DataObserver: components_1.DataObserver,
                    DynamicIcon: components_1.DynamicIcon,
                    EmptyState: components_1.EmptyState,
                    ErrorObserver: components_1.ErrorObserver,
                    ErrorState: components_1.ErrorState,
                    Header: components_1.Header,
                    HeaderBackButton: components_1.HeaderBackButton,
                    HeaderTitle: components_1.HeaderTitle,
                    HomeScreen: components_1.HomeScreen,
                    HoverObserver: components_1.HoverObserver,
                    Icon: components_1.Noop,
                    JsonSchema: components_1.JsonSchema,
                    Link: components_1.Link,
                    LoadingState: components_1.LoadingState,
                    Navigation: components_1.Navigation,
                    NavigationActions: components_1.NavigationActions,
                    Noop: components_1.Noop,
                    PluginIcon: components_1.PluginIcon,
                    Redirect: components_1.Redirect,
                    StatefulComponent: components_1.StatefulComponent,
                    WaitObserver: components_1.WaitObserver,
                    // Native
                    ActivityIndicator: native_1.ActivityIndicator,
                    Button: native_1.Button,
                    Image: native_1.Image,
                    Text: native_1.Text,
                    View: native_1.View,
                    // Typography
                    H1: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.h1 }),
                    },
                    H2: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.h2 }),
                    },
                    H3: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.h3 }),
                    },
                    H4: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.h4 }),
                    },
                    H5: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.h5 }),
                    },
                    H6: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.h6 }),
                    },
                    Subtitle1: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.subtitle1 }),
                    },
                    Subtitle2: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.subtitle2 }),
                    },
                    Body1: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.body1 }),
                    },
                    Body2: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.body2 }),
                    },
                    Caption: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.caption }),
                    },
                    Overline: {
                        value: native_1.Text,
                        styles: (theme) => ({ root: theme.typography.overline }),
                    },
                });
                return bootOptions;
            },
        },
    ],
    /**
     * This filter registers components from bootOptions.components property.
     * These are the components typically set in the bluebase.js file.
     */
    'bluebase.components.register': [
        {
            key: 'bluebase-components-register-default',
            priority: 5,
            // tslint:disable-next-line:object-literal-sort-keys
            value: async (bootOptions, _ctx, BB) => {
                await BB.Components.registerCollection(bootOptions.components);
                return bootOptions;
            },
        },
    ],
};
