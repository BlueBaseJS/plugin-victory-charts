"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const lodash_isboolean_1 = tslib_1.__importDefault(require("lodash.isboolean"));
const lodash_isnil_1 = tslib_1.__importDefault(require("lodash.isnil"));
/**
 * # ⚡️ DataObserver
 *
 * Observes data to check if it is data is loading, loaded or empty. The resulting flags
 * are passed on to the children function. These flags may be used to show different UIs,
 * i.e. loading state, empty state, etc.
 *
 * ## Usage
 * ```jsx
 * <DataObserver>
 *  <Text>{data}</Text>
 * </DataObserver>
 * ```
 */
class DataObserver extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            isEmpty: this.props.isEmpty ? this.props.isEmpty(this.props) : false,
            isLoading: this.props.isLoading ? this.props.isLoading(this.props) : false,
        };
    }
    render() {
        const { children } = this.props;
        if (typeof children === 'function') {
            return children({
                data: this.props.data,
                empty: this.state.isEmpty,
                loading: this.state.isLoading,
            });
        }
        return children;
    }
}
DataObserver.defaultProps = {
    loading: false,
    isEmpty: props => {
        // If its null or undefined
        if (lodash_isnil_1.default(props.data)) {
            return true;
        }
        // If its an empty array
        if (Array.isArray(props.data) && props.data.length === 0) {
            return true;
        }
        return false;
    },
    isLoading: props => (!lodash_isnil_1.default(props.loading) && lodash_isboolean_1.default(props.loading) ? props.loading : false),
};
exports.DataObserver = DataObserver;
