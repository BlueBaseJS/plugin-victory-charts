"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Context_1 = require("../../Context");
const getComponent_1 = require("../../getComponent");
const react_1 = tslib_1.__importDefault(require("react"));
const utils_1 = require("../../utils");
/**
 * # ðŸ”Œ PluginIcon
 *
 * Displays an icon of a Plugin. The icon properties are taken from plugin.icon property
 * of plugin.
 *
 * If no plugin is found, renders an error message.
 *
 * If a plugin has no icon, renders null.
 *
 * ## Usage:
 * ```jsx
 * <PluginIcon id="redux-plugin" />
 * ```
 *
 * TODO: In future, add a default icon.
 */
class PluginIcon extends react_1.default.PureComponent {
    render() {
        const BB = this.context;
        const { id, size } = this.props;
        const plugin = BB.Plugins.get(id);
        if (!plugin) {
            throw new Error(`There's no pluign registered with "${id}" key in the registry.`);
        }
        if (!plugin.icon) {
            return null;
        }
        const iconProps = utils_1.resolveThunk(plugin.icon, { plugin, size }, BB);
        return react_1.default.createElement(getComponent_1.DynamicIcon, Object.assign({}, iconProps, { size: size }));
    }
}
PluginIcon.contextType = Context_1.BlueBaseContext;
exports.PluginIcon = PluginIcon;
