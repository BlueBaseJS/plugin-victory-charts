"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
/**
 * # ‚è∞ WaitObserver
 *
 * This component is used to do the following:
 *
 * - WaitObserver a certain period of time before rendering a component
 * - Show timeout state, if the component is visible for a certain time period
 *
 * A use case for this can be to show a loading state after waiting a certain period
 * of time for data to load, and if the loading takes too long, show a timeout state.
 *
 * ## Usage
 * ```jsx
 * <WaitObserver
 *  delay={1000}
 *  timeout={3000}
 *  onTimeout={onTimeout}
 *  onRetry={onRetry}
 *  children={(props: WaitObserverChildrenProps) => <LoadingState {...props} />}
 * />
 * ```
 */
class WaitObserver extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            pastDelay: false,
            timedOut: false,
        };
        this.retry = () => {
            if (this.props.onRetry) {
                this.props.onRetry();
            }
            this.setState({ timedOut: false });
            this.init();
        };
    }
    componentWillMount() {
        this.init();
    }
    componentWillUnmount() {
        this.clearTimeouts();
    }
    render() {
        if (this.state.pastDelay) {
            const { children } = this.props;
            if (typeof children === 'function') {
                return children({
                    retry: this.retry,
                    timedOut: this.state.timedOut,
                });
            }
            return children;
        }
        else {
            return null;
        }
    }
    init() {
        if (typeof this.props.delay === 'number') {
            if (this.props.delay === 0) {
                this.setState({ pastDelay: true });
            }
            else {
                this._delay = setTimeout(() => {
                    this.setState({ pastDelay: true });
                }, this.props.delay);
            }
        }
        if (typeof this.props.timeout === 'number') {
            this._timeout = setTimeout(() => {
                if (this.props.onTimeout) {
                    this.props.onTimeout();
                }
                this.setState({ timedOut: true });
            }, this.props.timeout);
        }
    }
    clearTimeouts() {
        if (this._delay) {
            clearTimeout(this._delay);
        }
        if (this._timeout) {
            clearTimeout(this._timeout);
        }
    }
}
WaitObserver.defaultProps = {
    delay: 200,
    onRetry: () => { return; },
    onTimeout: () => { return; },
};
exports.WaitObserver = WaitObserver;
