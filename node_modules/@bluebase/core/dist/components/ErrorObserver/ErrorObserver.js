"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Context_1 = require("../../Context");
const getComponent_1 = require("../../getComponent");
const react_1 = tslib_1.__importDefault(require("react"));
const MISSING_ERROR = 'An unknown error occured.';
/**
 * # ðŸš¨ ErrorObserver
 *
 * Observes any exceptions in child tree hierarchy. When an exception is caught, displays
 * an Error state to gracefully handle it on the frontend.
 *
 * ## Usage
 * ```jsx
 * <ErrorObserver
 *  errorComponent={ErrorState}
 * >
 *  <Text>Rendered if there is no error here</Text>
 * </ErrorObserver>
 * ```
 */
class ErrorObserver extends react_1.default.PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            error: (this.props.checkError) ? this.props.checkError(this.props) : undefined,
        };
    }
    componentDidCatch(error) {
        this.setState({
            error: error || new Error(MISSING_ERROR)
        });
    }
    render() {
        const BB = this.context;
        const { error } = this.state;
        const { children } = this.props;
        if (error) {
            BB.Logger.error(error);
            const Error = this.props.errorComponent || getComponent_1.ErrorState;
            return react_1.default.createElement(Error, { error });
        }
        // 'children' as a function, 'render prop' pattern
        if (typeof children === 'function') {
            return children();
        }
        return children;
    }
}
ErrorObserver.contextType = Context_1.BlueBaseContext;
ErrorObserver.defaultProps = {
    checkError: (props) => props.error,
};
exports.ErrorObserver = ErrorObserver;
