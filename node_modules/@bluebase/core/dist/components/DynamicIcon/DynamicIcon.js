"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Context_1 = require("../../Context");
const react_1 = tslib_1.__importDefault(require("react"));
/**
 * # ðŸ—¿ DynamicIcon
 *
 * An enhanced Icon that can render any of the following:
 * - BB.Components.Icon
 * - BB.Components.Image
 * - A custom component
 *
 * ## Usage
 * ```jsx
 * <DynamicIcon type="image" size={250} source={{ uri: 'https://picsum.photos/200' }} />
 * ```
 */
class DynamicIcon extends react_1.default.PureComponent {
    render() {
        const BB = this.context;
        const _a = this.props, { type, component: Component, name, source } = _a, other = tslib_1.__rest(_a, ["type", "component", "name", "source"]);
        const rest = Object.assign({}, other);
        let component;
        if (!rest.style) {
            rest.style = {};
        }
        if (type === 'component' && Component) {
            component = (typeof Component === 'string')
                ? BB.Components.resolve(Component)
                : component = Component;
        }
        else if (type === 'icon' && name) {
            component = BB.Components.resolve('Icon');
            rest.name = name;
        }
        else if (type === 'image' && source) {
            component = BB.Components.resolve('Image');
            rest.source = source;
            rest.style.width = Number(rest.size);
            rest.style.height = Number(rest.size);
        }
        else {
            return null;
        }
        rest.size = Number(rest.size);
        return react_1.default.createElement(component, rest);
    }
}
DynamicIcon.contextType = Context_1.BlueBaseContext;
DynamicIcon.defaultProps = {
    size: 100
};
exports.DynamicIcon = DynamicIcon;
