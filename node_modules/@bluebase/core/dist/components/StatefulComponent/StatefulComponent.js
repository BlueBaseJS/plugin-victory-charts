"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const getComponent_1 = require("../../getComponent");
const react_1 = tslib_1.__importDefault(require("react"));
/**
 * # üë®‚Äçüé® StatefulComponent
 *
 * This is a swiss army knife component. Intended to be used as a single source of UI
 * state management. It shows empty, loading, error or data states based on the given props.
 *
 * ## Usage
 * ```jsx
 * <StatefulComponent data={data} loading={true} delay={200} timeout={10000}>
 *  <Text>Content</Text>
 * </StatefulComponent>
 * ```
 */
class StatefulComponent extends react_1.default.PureComponent {
    render() {
        const _a = this.props, { component: Component, loadingComponent, emptyComponent, errorComponent, children, 
        // DataObserver
        isLoading, isEmpty, loading, data, 
        // WaitObserver
        delay, timeout, onRetry, onTimeout, 
        // ErrorObserver
        error, checkError } = _a, other = tslib_1.__rest(_a, ["component", "loadingComponent", "emptyComponent", "errorComponent", "children", "isLoading", "isEmpty", "loading", "data", "delay", "timeout", "onRetry", "onTimeout", "error", "checkError"]);
        const rest = Object.assign({ data }, other);
        return (react_1.default.createElement(getComponent_1.ErrorObserver, Object.assign({}, { error, checkError, errorComponent, rest }),
            react_1.default.createElement(getComponent_1.DataObserver, Object.assign({}, { isEmpty, isLoading, loading, data, rest }, { children: (event) => {
                    if (event.loading === true) {
                        return react_1.default.createElement(getComponent_1.WaitObserver, {
                            children: (props) => react_1.default.createElement(getComponent_1.LoadingState, Object.assign({}, props)),
                            delay,
                            onRetry,
                            onTimeout,
                            timeout,
                        });
                    }
                    if (event.empty) {
                        return (react_1.default.createElement(getComponent_1.EmptyState, null));
                    }
                    // Render 'component' prop
                    if (Component) {
                        return react_1.default.createElement(Component, rest);
                    }
                    // 'children' as a function, 'render prop' pattern
                    if (typeof children === 'function') {
                        return children(rest);
                    }
                    // children
                    return children;
                } }))));
    }
}
StatefulComponent.defaultProps = {
    timeout: 10000,
};
exports.StatefulComponent = StatefulComponent;
