import { DataObserverProps } from '../DataObserver';
import { WaitObserverProps } from '../WaitObserver';
import { ErrorObserverProps } from '../ErrorObserver';
import { MaybeRenderPropChildren } from '../../utils';
import React from 'react';
export interface StatefulComponentProps extends DataObserverProps, ErrorObserverProps, WaitObserverProps {
    component?: React.ComponentType<any>;
    loadingComponent?: React.ComponentType<any>;
    emptyComponent?: React.ComponentType<any>;
    children?: MaybeRenderPropChildren;
    /**
     * Used to locate this view in end-to-end tests.
     */
    testID?: string;
}
/**
 * # üë®‚Äçüé® StatefulComponent
 *
 * This is a swiss army knife component. Intended to be used as a single source of UI
 * state management. It shows empty, loading, error or data states based on the given props.
 *
 * ## Usage
 * ```jsx
 * <StatefulComponent data={data} loading={true} delay={200} timeout={10000}>
 *  <Text>Content</Text>
 * </StatefulComponent>
 * ```
 */
export declare class StatefulComponent extends React.PureComponent<StatefulComponentProps> {
    static defaultProps: Partial<StatefulComponentProps>;
    render(): JSX.Element;
}
