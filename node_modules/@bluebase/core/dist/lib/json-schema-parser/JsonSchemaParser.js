"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const lodash_isnil_1 = tslib_1.__importDefault(require("lodash.isnil"));
const lodash_isstring_1 = tslib_1.__importDefault(require("lodash.isstring"));
class JsonSchemaParser {
    constructor(getComponent = () => null) {
        this.getComponent = getComponent;
        //
    }
    parseSchema(schema) {
        if (Array.isArray(schema)) {
            return this.parseSubSchemas(schema);
        }
        return this.createComponent(schema);
    }
    parseSubSchemas(subSchemas = []) {
        const Components = [];
        let index = 0;
        for (const subSchema of subSchemas) {
            subSchema.props = subSchema.props || {};
            subSchema.props.key = subSchema.props.key || String(index);
            const Component = this.parseSchema(subSchema);
            Components.push(Component);
            index++;
        }
        return Components;
    }
    createComponent(schema) {
        const { text, props, component } = schema;
        if (lodash_isnil_1.default(component)) {
            throw Error('Could not parse React JSON Schema. Reason: "component" property is required, but not given.');
        }
        // // If schema.component is a React Component, return it
        // if (!isString(component) && React.isValidElement(component)) {
        // 	return component;
        // }
        const Component = this.resolveComponent(schema);
        const Children = text || this.resolveComponentChildren(schema);
        return react_1.default.createElement(Component, props, Children);
    }
    resolveComponent(node) {
        // component is already a react component
        if (!lodash_isstring_1.default(node.component) && node.component === Object(node.component)) {
            return node.component;
        }
        const Component = this.getComponent(node);
        if (Component) {
            return Component;
        }
        throw Error('Could not parse React JSON Schema. Reason: Could not resolve component.');
    }
    resolveComponentChildren({ children, }) {
        return !lodash_isnil_1.default(children) ? this.parseSchema(children) : undefined;
    }
}
exports.JsonSchemaParser = JsonSchemaParser;
