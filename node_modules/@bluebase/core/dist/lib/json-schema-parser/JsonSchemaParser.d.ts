/**
 * Initial code take from https://github.com/TechniqueSoftware/react-json-schema
 */
import { MaybeArray } from '../../utils';
import React from 'react';
export interface JsonComponentNode {
    component: string | React.ComponentType<any>;
    text?: string;
    props?: {
        key?: string;
        [key: string]: any;
    };
    children?: JsonComponentNode[];
    name?: string;
}
export declare type ResolveComponentFn = (node: JsonComponentNode) => React.ComponentType<any> | null;
export declare class JsonSchemaParser {
    private getComponent;
    constructor(getComponent?: ResolveComponentFn);
    parseSchema(schema: MaybeArray<JsonComponentNode>): MaybeArray<React.ReactElement<any>>;
    parseSubSchemas(subSchemas?: JsonComponentNode[]): Array<React.ReactElement<any>>;
    createComponent(schema: JsonComponentNode): React.ReactElement<any>;
    resolveComponent(node: JsonComponentNode): React.ComponentType<any>;
    resolveComponentChildren({ children, }: JsonComponentNode): MaybeArray<React.ReactElement<any>> | undefined;
}
