"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const utils_1 = require("../../utils");
const react_1 = tslib_1.__importDefault(require("react"));
const __1 = require("..");
const buildTheme_1 = require("./buildTheme");
const deepmerge_1 = tslib_1.__importDefault(require("deepmerge"));
const lodash_isnil_1 = tslib_1.__importDefault(require("lodash.isnil"));
/**
 * Merges component styles from different sources and passes on the the component as 'styles' prop.
 *
 * Following sources are considered as style sources. (In order of least important first):
 *
 * 1. defaultStyles: A component may provide default styles as a "defaultStyles" static
 * property of component. This is similar to defaultProps in react.
 * 2. stylesParam: 3rd property of this function. Note: Component Registry passes 'styles' prop from it's registry item.
 * 3. Themes: From theme.components[componentName] property of current theme.
 * 4. styles prop: The styles prop passed on to the component during usage.
 *
 * FIXME: Fix return typing of this function
 *
 * @param name
 * @param Component
 * @param stylesParam
 */
exports.applyStyles = ({ name, styles: stylesParam } = {}) => (Component) => {
    var _a;
    return _a = class ThemedComponent extends react_1.default.Component {
            render() {
                const context = this.context;
                const _a = this.props, { styles: stylesProp } = _a, rest = tslib_1.__rest(_a, ["styles"]);
                // Extract defaultStyles from component
                const defaultStyles = Component.defaultStyles;
                // Extract theme, or use default theme as placeholder
                // We need to do this, because when the actual theme is being resolved,
                // we may need to show Loading state. That state may need some styles as well.
                const theme = context ? context.theme : buildTheme_1.buildTheme()();
                // Extract component style rules from theme
                let themedStyles;
                if (name) {
                    const themeComponentStyles = theme.components;
                    // Extract style rules for this component
                    themedStyles = themeComponentStyles[name];
                }
                // Put all style rules in an array
                const stylesArr = [
                    defaultStyles,
                    stylesParam,
                    themedStyles,
                    stylesProp,
                ]
                    // Remove those styles which are nil
                    .filter(a => !lodash_isnil_1.default(a))
                    // If any item is a thunk, resolve it
                    .map(a => a && utils_1.resolveThunk(a, theme));
                // Merge all into a single object
                const styles = deepmerge_1.default.all(stylesArr);
                // If we were able to extract any rules, pass them forward in the styles prop
                const props = stylesArr.length > 0 ? Object.assign({}, rest, { styles }) : rest;
                return react_1.default.createElement(Component, props);
            }
        },
        _a.contextType = __1.ThemeContext,
        _a;
};
