import React from 'react';
import { BlueBase } from '../BlueBase';
import { Theme } from '../registries';
import { ThemeValueInput } from './structure';
/**
 * Props of the `ThemeProvider` component.
 */
export interface ThemeProviderProps {
    /**
     * Key of the theme to use for children components. If this prop is not set,
     * the globally selected theme is used.
     */
    theme?: string;
    /**
     * Any custom overrides to the selected theme.
     */
    overrides?: ThemeValueInput;
    children: React.ReactNode;
}
export interface ThemeProviderState {
    readonly loading: boolean;
    readonly theme?: Theme;
    readonly error?: any;
}
/**
 * Interface of object passed as param to the ThemeConsumer render prop method.
 */
export interface ThemeContextData {
    /** Helper method to change current theme. */
    changeTheme: (slug: string) => void;
    /** Current theme */
    theme: Theme;
}
/**
 * This is the context where BlueBase theme is stored.
 */
export declare const ThemeContext: React.Context<ThemeContextData>;
/**
 * BlueBase theme consumer.
 */
export declare const ThemeConsumer: React.ExoticComponent<React.ConsumerProps<ThemeContextData>>;
/**
 * ðŸŽ¨ ThemeProvider
 */
export declare class ThemeProvider extends React.Component<ThemeProviderProps, ThemeProviderState> {
    static contextType: React.Context<BlueBase>;
    readonly state: ThemeProviderState;
    /** Stores configuration subscription ID */
    private subscriptionId?;
    componentWillMount(): Promise<void>;
    componentWillUnmount(): void;
    /**
     * Sets a theme to Provider's state. If a theme key is given, it is used,
     * otherwise global theme is used.
     *
     * @param slug
     * @param BB
     */
    setTheme(slug: string | undefined, overrides: ThemeValueInput | undefined, BB: BlueBase): Promise<void>;
    render(): JSX.Element;
}
