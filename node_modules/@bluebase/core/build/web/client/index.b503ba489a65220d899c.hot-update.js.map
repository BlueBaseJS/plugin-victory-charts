{"version":3,"sources":["webpack:///./src/registries/PluginRegistry.ts"],"names":["inputToPlugin","plugin","value","rest","components","defaultConfigs","enabled","hooks","name","themes","createPlugin","route","categories","PluginRegistry","keys","item","findOne","Error","join","input","key","get","set","config","startsWith","Object","findIndex","k","partial","BlueBaseModuleRegistry"],"mappings":";;;;;;;;;ylEAAA,8HAMA,uEAiEO,QAASA,cAAT,CAAuBC,MAAvB,CAAoD,IAClDC,MADkD,CAC/BD,MAD+B,CAClDC,KADkD,CACxCC,IADwC,uCAC/BF,MAD+B,YAG1D,kCACCG,UAAU,CAAE,EADb,CAECC,cAAc,CAAE,EAFjB,CAGCC,OAAO,CAAE,IAHV,CAICC,KAAK,CAAE,EAJR,CAKCC,IAAI,CAAE,iBALP,CAMCC,MAAM,CAAE,EANT,EAQIN,IARJ,CASID,KATJ,EAWA,CAMM,QAASQ,aAAT,CAAsBT,MAAtB,CAA4D,IAC1DG,WAD0D,CACLH,MADK,CAC1DG,UAD0D,CAC9CG,KAD8C,CACLN,MADK,CAC9CM,KAD8C,CACvCE,MADuC,CACLR,MADK,CACvCQ,MADuC,CAC/BE,KAD+B,CACLV,MADK,CAC/BU,KAD+B,CACxBT,KADwB,CACLD,MADK,CACxBC,KADwB,CACdC,IADc,uCACLF,MADK,kDAGlE,kCACCW,UAAU,CAAE,EADb,CAECP,cAAc,CAAE,EAFjB,CAGCC,OAAO,CAAE,IAHV,CAICE,IAAI,CAAE,iBAJP,EAMIL,IANJ,EAQCD,KAAK,6BACJE,UAAU,CAAEA,UAAU,EAAI,EADtB,CAEJG,KAAK,CAAEA,KAAK,EAAI,EAFZ,CAGJI,KAAK,CAALA,KAHI,CAIJF,MAAM,CAAEA,MAAM,EAAI,EAJd,EAMDP,KANC,CARN,GAiBA,C,GAKYW,e,0nBAKYC,I,0CAAAA,I,oBACjBC,I,CAAO,KAAKC,OAAL,YAAgBF,IAAhB,C,IAERC,I,8BACEE,MAAK,4DAAqDH,IAAI,CAACI,IAAL,CAAU,IAAV,CAArD,O,sEAGoBH,I,uBAAmBA,KAAI,CAACb,K,+CAAlBA,K,cAAhCiB,K,sFAECnB,aAAa,CAACmB,KAAD,C,yLAOJC,G,CAAa,CAC7B,GAAML,KAAI,CAAG,KAAKM,GAAL,CAASD,GAAT,CAAb,CAEA,GAAI,CAACL,IAAL,CAAW,CACV,KAAME,MAAK,uFACoEG,GADpE,QAAX,CAGA,CAED,MAAOL,KAAI,CAACT,OAAZ,CACA,C,wHAMmBc,G,gIACbL,I,CAAO,KAAKM,GAAL,CAASD,GAAT,C,IAERL,I,+BACEE,MAAK,0EAAkEG,GAAlE,Q,QAGZL,IAAI,CAACT,OAAL,CAAe,IAAf,CACA,KAAKgB,GAAL,CAASF,GAAT,CAAcL,IAAd,E,qQAOoBK,G,gIACdL,I,CAAO,KAAKM,GAAL,CAASD,GAAT,C,IAERL,I,+BACEE,MAAK,2EAAmEG,GAAnE,Q,QAGZL,IAAI,CAACT,OAAL,CAAe,KAAf,CACA,KAAKgB,GAAL,CAASF,GAAT,CAAcL,IAAd,E,2LAagBK,G,CAAaG,M,CAAyB,CACtD,GAAMtB,OAAM,CAAG,KAAKoB,GAAL,CAASD,GAAT,CAAf,CAEA,GAAI,CAACnB,MAAL,CAAa,CACZ,KAAMgB,MAAK,sFACmEG,GADnE,QAAX,CAGA,CAED,MACCG,OAAM,CAACC,UAAP,kBAA4BJ,GAA5B,QACAK,MAAM,CAACX,IAAP,CAAYb,MAAM,CAACI,cAAnB,EAAmCqB,SAAnC,CAA6C,SAAAC,CAAC,QAAIA,EAAC,GAAKJ,MAAV,EAA9C,GAAmE,CAFpE,CAIA,C,8CAOoBH,G,CAAaQ,O,CAAwB,CACzD,4GAAwBR,GAAxB,CAA6BV,YAAY,CAACkB,OAAD,CAAzC,EACA,C,kDAMsB1B,K,CAAuD,CAC7E,MAAO,4BAAiBA,KAAjB,GAA2B,qBAAOA,KAAP,IAAiB,QAAnD,CACA,C,4BAvGkC2B,8C","file":"index.b503ba489a65220d899c.hot-update.js","sourcesContent":["import {\n\tBlueBaseModuleRegistry,\n\tBlueBaseModuleRegistryInputItem,\n\tBlueBaseModuleRegistryItem,\n} from './BlueBaseModuleRegistry';\nimport { DynamicIconProps, RouteConfig } from '../components/';\nimport { MaybeThunk, isBlueBaseModule } from '../utils';\nimport { ComponentCollection } from './ComponentRegistry';\nimport { ConfigCollection } from './ConfigRegistry';\nimport { HookNestedCollection } from './HookRegistry';\nimport { ItemCollection } from './Registry';\nimport { ThemeCollection } from './ThemeRegistry';\n\nexport type PluginCategory =\n\t| 'app'\n\t| 'store'\n\t| 'router'\n\t| 'logging'\n\t| 'theme'\n\t| 'analytics'\n\t| string;\n\nexport interface PluginValue {\n\tcomponents: ComponentCollection;\n\thooks: HookNestedCollection; // HookCollectionInput;\n\tthemes: ThemeCollection;\n\troute?: MaybeThunk<RouteConfig>;\n}\n\nexport type PluginValueInput = Partial<PluginValue>;\n\nexport interface PluginRegistryItemExtras {\n\t/**\n\t * Name of the plugin.\n\t *\n\t * We put it in meta so we can show the name in menu een without downloading\n\t * the whole plugin.\n\t */\n\tname: string;\n\n\t/** Plugin categories */\n\tcategories?: PluginCategory[];\n\n\t/** Plugin description */\n\tdescription?: string;\n\n\t/** Plugin version */\n\tversion?: string;\n\n\t/** Plugin Icon Props */\n\ticon?: MaybeThunk<DynamicIconProps>;\n\n\t/** Is this plugin currently enabled/ */\n\tenabled: boolean;\n\n\tdefaultConfigs: ConfigCollection;\n\n\t[key: string]: any;\n}\n\nexport type PluginRegistryItem = BlueBaseModuleRegistryItem<PluginValue> & PluginRegistryItemExtras;\nexport type PluginRegistryInputItem = BlueBaseModuleRegistryInputItem<PluginValueInput>;\n\ntype ItemType = PluginRegistryItem;\ntype ItemInputType = PluginRegistryInputItem;\n\nexport type Plugin = PluginRegistryItemExtras & PluginValue;\nexport type PluginInput = PluginRegistryInputItem;\n\nexport type PluginCollection = ItemCollection<PluginInput>;\n\nexport function inputToPlugin(plugin: PluginInput): Plugin {\n\tconst { value, ...rest } = plugin;\n\n\treturn {\n\t\tcomponents: {},\n\t\tdefaultConfigs: {},\n\t\tenabled: true,\n\t\thooks: {},\n\t\tname: 'Untitled Plugin',\n\t\tthemes: {},\n\n\t\t...rest,\n\t\t...value,\n\t};\n}\n\n/**\n * Creates a BlueBase plugin from input params\n * @param plugin\n */\nexport function createPlugin(plugin: Partial<Plugin>): PluginInput {\n\tconst { components, hooks, themes, route, value, ...rest } = plugin;\n\n\treturn {\n\t\tcategories: [],\n\t\tdefaultConfigs: {},\n\t\tenabled: true,\n\t\tname: 'Untitled Plugin',\n\n\t\t...rest,\n\n\t\tvalue: {\n\t\t\tcomponents: components || {},\n\t\t\thooks: hooks || {},\n\t\t\troute,\n\t\t\tthemes: themes || {},\n\n\t\t\t...value,\n\t\t},\n\t};\n}\n\n/**\n * ðŸ”Œ PluginRegistry\n */\nexport class PluginRegistry extends BlueBaseModuleRegistry<ItemType, ItemInputType> {\n\t/**\n\t * Returns a Promise that resolves a Plugin\n\t * @param keys\n\t */\n\tpublic async resolve(...keys: string[]): Promise<Plugin> {\n\t\tconst item = this.findOne(...keys);\n\n\t\tif (!item) {\n\t\t\tthrow Error(`Could not resolve any of the following plugins: [${keys.join(', ')}].`);\n\t\t}\n\n\t\tconst input: PluginInput = { ...item, value: await item.value };\n\n\t\treturn inputToPlugin(input);\n\t}\n\n\t/**\n\t * Checks if a plugin is enabled\n\t * @param key\n\t */\n\tpublic isEnabled(key: string) {\n\t\tconst item = this.get(key);\n\n\t\tif (!item) {\n\t\t\tthrow Error(\n\t\t\t\t`Could not check if plugin is enabled. Reason: No plugin registered by key \"${key}\".`\n\t\t\t);\n\t\t}\n\n\t\treturn item.enabled;\n\t}\n\n\t/**\n\t * Enable a plugin\n\t * @param key\n\t */\n\tpublic async enable(key: string) {\n\t\tconst item = this.get(key);\n\n\t\tif (!item) {\n\t\t\tthrow Error(`Could not enable plugin. Reason: No plugin registered by key \"${key}\".`);\n\t\t}\n\n\t\titem.enabled = true;\n\t\tthis.set(key, item);\n\t}\n\n\t/**\n\t * Disable a plugin\n\t * @param key\n\t */\n\tpublic async disable(key: string) {\n\t\tconst item = this.get(key);\n\n\t\tif (!item) {\n\t\t\tthrow Error(`Could not disbale plugin. Reason: No plugin registered by key \"${key}\".`);\n\t\t}\n\n\t\titem.enabled = false;\n\t\tthis.set(key, item);\n\t}\n\n\t/**\n\t * Checks if a config belongs to a plugin. Does so by checking 2 things:\n\t *\n\t * 1. Does the config start with 'plugin.{key}.'?\n\t * 2. Does the config exist in defaultConfigs property of the plugin?\n\t *\n\t * Returns true if any of the above are true, otherwise returns false\n\t *\n\t * @param key\n\t */\n\tpublic hasConfig(key: string, config: string): boolean {\n\t\tconst plugin = this.get(key);\n\n\t\tif (!plugin) {\n\t\t\tthrow Error(\n\t\t\t\t`Could not check config for a plugin. Reason: No plugin registered by key \"${key}\".`\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\tconfig.startsWith(`plugin.${key}.`) ||\n\t\t\tObject.keys(plugin.defaultConfigs).findIndex(k => k === config) >= 0\n\t\t);\n\t}\n\n\t/**\n\t * Convert any input value to an item. This is where you transform inputs and add defualts\n\t * @param key\n\t * @param partial\n\t */\n\tprotected createItem(key: string, partial: any): ItemType {\n\t\treturn super.createItem(key, createPlugin(partial));\n\t}\n\n\t/**\n\t * Typeguard to check a given object is an input value\n\t * @param value\n\t */\n\tprotected isInputValue(value: any): value is PluginRegistryInputItem['value'] {\n\t\treturn isBlueBaseModule(value) || typeof value === 'object';\n\t}\n}\n"],"sourceRoot":""}