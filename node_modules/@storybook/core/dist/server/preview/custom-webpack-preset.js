"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.webpack = webpack;

var _nodeLogger = require("@storybook/node-logger");

var _loadCustomWebpackConfig = _interopRequireDefault(require("../utils/load-custom-webpack-config"));

var _mergeWebpackConfig = _interopRequireDefault(require("../utils/merge-webpack-config"));

var _baseWebpack = require("./base-webpack.config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function createFinalDefaultConfig(presets, config, options) {
  const defaultConfig = (0, _baseWebpack.createDefaultWebpackConfig)(config);
  return presets.apply('webpackFinal', defaultConfig, options);
}

async function webpack(config, options) {
  const {
    configDir,
    configType,
    presets
  } = options;
  const finalDefaultConfig = await createFinalDefaultConfig(presets, config, options); // Check whether user has a custom webpack config file and
  // return the (extended) base configuration if it's not available.

  const customConfig = (0, _loadCustomWebpackConfig.default)(configDir);

  if (customConfig === null) {
    _nodeLogger.logger.info('=> Using default webpack setup.');

    return finalDefaultConfig;
  }

  if (typeof customConfig === 'function') {
    _nodeLogger.logger.info('=> Loading custom webpack config (full-control mode).');

    return customConfig({
      config: finalDefaultConfig,
      mode: configType
    });
  }

  _nodeLogger.logger.info('=> Loading custom webpack config (extending mode).');

  return (0, _mergeWebpackConfig.default)(finalDefaultConfig, customConfig);
}